import React, { useId, useMemo, useState } from 'react';
import './AdminDashboard.css';
import '../../styles/personaModals.css';
import AppHeader from '../../components/AppHeader';
import { useOrders } from '../../contexts/OrderContext';

const initialApprovals = [
  {
    id: 'AP-1042',
    restaurant: 'Savory Bites Kitchen',
    owner: 'Jamie Carter',
    cuisine: 'Modern American',
    submittedAt: 'April 12, 2024',
  },
  {
    id: 'AP-1038',
    restaurant: 'Morningside Bakery',
    owner: 'Elena Rosas',
    cuisine: 'Breakfast & Pastries',
    submittedAt: 'April 10, 2024',
  },
  {
    id: 'AP-1029',
    restaurant: 'Nori Street',
    owner: 'Kenji Watanabe',
    cuisine: 'Japanese Street Food',
    submittedAt: 'April 9, 2024',
  },
];

const initialWithdrawRequests = [
  {
    id: 'WR-482',
    restaurant: 'Green Bowl Deli',
    note: 'Pausing marketplace orders while undergoing a brand refresh. Looking for a temporary suspension until June.',
    submittedAt: 'April 11, 2024',
    contact: 'alli@greenbowl.example',
    open: false,
  },
  {
    id: 'WR-477',
    restaurant: 'Spice Route Express',
    note: 'Switching delivery partners. Please assist with data export and formal deactivation.',
    submittedAt: 'April 6, 2024',
    contact: 'owner@spiceroute.example',
    open: false,
  },
];

const initialStaffMembers = [
  { id: 'ST-101', name: 'Avery Chen', role: 'Account specialist' },
  { id: 'ST-102', name: 'Jordan Patel', role: 'Compliance reviewer' },
  { id: 'ST-103', name: 'Priya Kumar', role: 'Partner success' },
];

const initialDrivers = [
  { id: 'DV-301', name: 'Lena Ortiz' },
  { id: 'DV-302', name: 'Marcus Fields' },
  { id: 'DV-303', name: 'Hailey Winters' },
];

const demoLastNames = ['rivera', 'chen', 'patel', 'nguyen', 'gonzalez', 'mendes', 'khan', 'sato'];

const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$/;

function ModalShell({ title, description, onClose, children, actions }) {
  const titleId = useId();

  function handleOverlayClick(event) {
    if (event.target === event.currentTarget) {
      onClose();
    }
  }

  return (
    <div className="persona-modal__overlay" role="presentation" onClick={handleOverlayClick}>
      <div className="persona-modal" role="dialog" aria-modal="true" aria-labelledby={titleId}>
        <header>
          <h2 id={titleId}>{title}</h2>
          <button type="button" className="modal-close" onClick={onClose} aria-label="Close dialog">
            Ã—
          </button>
        </header>
        {description ? <p className="persona-modal__description">{description}</p> : null}
        <div className="persona-modal__body">{children}</div>
        <div className="persona-modal__actions">{actions}</div>
      </div>
    </div>
  );
}

function SummaryCard({ label, value, tone }) {
  return (
    <div className={`admin-summary-card ${tone}`}>
      <span className="admin-summary-card__label">{label}</span>
      <span className="admin-summary-card__value">{value}</span>
    </div>
  );
}

function StaffListItem({ person, onRemove }) {
  return (
    <li className="admin-roster-item">
      <div>
        <p className="admin-roster-item__name">{person.name}</p>
        {person.role ? <p className="admin-roster-item__role">{person.role}</p> : null}
      </div>
      <button type="button" className="text-button" onClick={onRemove}>
        Remove
      </button>
    </li>
  );
}

export default function AdminDashboard() {
  const [approvals, setApprovals] = useState(initialApprovals);
  const [withdrawRequests, setWithdrawRequests] = useState(initialWithdrawRequests);
  const [staffMembers, setStaffMembers] = useState(initialStaffMembers);
  const [drivers, setDrivers] = useState(initialDrivers);
  const [userAccounts, setUserAccounts] = useState([
    { id: 'USR-101', username: 'miller01', role: 'owner', status: 'active' },
    { id: 'USR-102', username: 'chen02', role: 'staff', status: 'active' },
    { id: 'USR-103', username: 'ortiz03', role: 'admin', status: 'suspended' },
  ]);
  const [autoGenerated, setAutoGenerated] = useState(false);
  const [helpTopic, setHelpTopic] = useState(null);
  const [banner, setBanner] = useState(null);

  const [modalState, setModalState] = useState(null);
  const [staffForm, setStaffForm] = useState({ firstName: '', lastName: '', error: '' });
  const [driverForm, setDriverForm] = useState({ firstName: '', lastName: '', error: '' });
  const [passwordForm, setPasswordForm] = useState({
    newPassword: '',
    confirmPassword: '',
    showRequirements: false,
  });
  const { orders, orderStatuses } = useOrders();

  const counts = useMemo(
    () => ({
      approvals: approvals.length,
      withdraws: withdrawRequests.length,
      staff: staffMembers.length,
      drivers: drivers.length,
      accounts: userAccounts.length,
      newOrders: orders.filter((order) => order.status === orderStatuses.NEW).length,
    }),
    [approvals, withdrawRequests, staffMembers, drivers, userAccounts, orders, orderStatuses]
  );

  function toggleHelp(topic) {
    setHelpTopic((prev) => (prev === topic ? null : topic));
  }

  function announce(message) {
    setBanner({ id: Date.now(), message });
  }

  function handleAddApproval() {
    const nextId = `AP-${Math.floor(Math.random() * 900 + 100)}`;
    setApprovals((prev) => [
      ...prev,
      {
        id: nextId,
        restaurant: 'New Restaurant Prospect',
        owner: 'Auto Generated',
        cuisine: 'Contemporary',
        submittedAt: new Intl.DateTimeFormat('en', { month: 'short', day: 'numeric', year: 'numeric' }).format(
          new Date()
        ),
      },
    ]);
    announce('Added a new sample approval request.');
  }

  function handleAddWithdraw() {
    const nextId = `WR-${Math.floor(Math.random() * 900 + 100)}`;
    setWithdrawRequests((prev) => [
      ...prev,
      {
        id: nextId,
        restaurant: 'New Withdrawal Request',
        note: 'Restaurant requesting to pause service while onboarding an in-house delivery team.',
        submittedAt: new Intl.DateTimeFormat('en', { month: 'short', day: 'numeric', year: 'numeric' }).format(
          new Date()
        ),
        contact: 'contact@example.com',
        open: true,
      },
    ]);
    announce('Sample withdrawal request logged.');
  }

  function openConfirm(kind, payload) {
    setModalState({
      type: 'confirm',
      payload: {
        kind,
        ...payload,
      },
    });
  }

  function handleResolveRequest() {
    if (modalState?.type !== 'confirm') return;
    const { kind, id, label } = modalState.payload;
    if (kind === 'approval') {
      setApprovals((prev) => prev.filter((item) => item.id !== id));
      announce(`Approval for ${label} resolved.`);
    } else if (kind === 'withdraw') {
      setWithdrawRequests((prev) => prev.filter((item) => item.id !== id));
      announce(`Withdrawal request for ${label} processed.`);
    } else if (kind === 'staff') {
      setStaffMembers((prev) => prev.filter((item) => item.id !== id));
      announce(`Removed ${label} from the staff roster.`);
    } else if (kind === 'driver') {
      setDrivers((prev) => prev.filter((item) => item.id !== id));
      announce(`Removed ${label} from the driver pool.`);
    }
    setModalState(null);
  }

  function openAddStaffModal() {
    setStaffForm({ firstName: '', lastName: '', error: '' });
    setModalState({ type: 'add-staff' });
  }

  function openAddDriverModal() {
    setDriverForm({ firstName: '', lastName: '', error: '' });
    setModalState({ type: 'add-driver' });
  }

  function openPasswordModal() {
    setPasswordForm({ newPassword: '', confirmPassword: '', showRequirements: false });
    setModalState({ type: 'password' });
  }

  function handleStaffSubmit() {
    const first = staffForm.firstName.trim();
    const last = staffForm.lastName.trim();
    if (!first || !last) {
      setStaffForm((prev) => ({ ...prev, error: 'Enter both a first and last name.' }));
      return;
    }
    const fullName = `${first} ${last}`;
    setStaffMembers((prev) => [
      ...prev,
      { id: `ST-${Date.now()}`, name: fullName, role: 'Partner success' },
    ]);
    setModalState(null);
    announce(`${fullName} added to the staff roster.`);
  }

  function handleDriverSubmit() {
    const first = driverForm.firstName.trim();
    const last = driverForm.lastName.trim();
    if (!first || !last) {
      setDriverForm((prev) => ({ ...prev, error: 'Enter both a first and last name.' }));
      return;
    }
    const fullName = `${first} ${last}`;
    setDrivers((prev) => [
      ...prev,
      { id: `DV-${Date.now()}`, name: fullName },
    ]);
    setModalState(null);
    announce(`${fullName} added to the driver pool.`);
  }

  function generateUsername(existingUsernames) {
    let attempt = 0;
    let candidate = '';
    do {
      const lastName = demoLastNames[Math.floor(Math.random() * demoLastNames.length)];
      const digits = String(Math.floor(Math.random() * 90 + 10));
      candidate = `${lastName}${digits}`;
      attempt += 1;
    } while (existingUsernames.has(candidate) && attempt < 12);
    if (existingUsernames.has(candidate)) {
      candidate = `user${Date.now().toString().slice(-4)}`;
    }
    return candidate;
  }

  function handleAddAccount(role = 'staff') {
    setUserAccounts((prev) => {
      const existing = new Set(prev.map((account) => account.username));
      const username = generateUsername(existing);
      const account = {
        id: `USR-${Date.now()}`,
        username,
        role,
        status: 'active',
      };
      announce(`Created ${role} account ${username}.`);
      return [...prev, account];
    });
  }

  function toggleAccountStatus(id) {
    const account = userAccounts.find((entry) => entry.id === id);
    if (!account) return;
    const nextStatus = account.status === 'active' ? 'suspended' : 'active';
    setUserAccounts((prev) =>
      prev.map((entry) => (entry.id === id ? { ...entry, status: nextStatus } : entry))
    );
    announce(`${account.username} ${nextStatus === 'active' ? 're-activated' : 'suspended'}.`);
  }

  const passwordValid = passwordRegex.test(passwordForm.newPassword);
  const passwordMismatch =
    passwordForm.confirmPassword.length > 0 && passwordForm.newPassword !== passwordForm.confirmPassword;

  function handlePasswordSubmit() {
    if (!passwordValid || passwordMismatch) return;
    setModalState(null);
    announce('Administrator password updated.');
  }

  function toggleWithdrawCard(id) {
    setWithdrawRequests((prev) =>
      prev.map((request) =>
        request.id === id ? { ...request, open: !request.open } : request
      )
    );
  }

  function handleAutoGenerate() {
    setAutoGenerated(true);
    announce('Auto-generated staffing assignments ready for review.');
  }

  const confirmPayload = modalState?.type === 'confirm' ? modalState.payload : null;

  return (
    <>
      <AppHeader />
      <div className="admin-dashboard">
        <header className="admin-header">
          <div>
            <p className="admin-eyebrow">Platform Administration</p>
          <h1>Administrator Console</h1>
          <p className="admin-subtitle">
            Monitor onboarding activity, manage withdrawal requests, and keep the operations team roster up to date.
          </p>
        </div>
        <button
          type="button"
          className={`admin-auto-generate ${autoGenerated ? 'is-complete' : ''}`}
          onClick={handleAutoGenerate}
        >
          {autoGenerated ? 'Shift plan generated' : 'Auto-generate shift plan'}
        </button>
      </header>

      {banner ? (
        <div className="admin-banner" role="status" aria-live="polite">
          {banner.message}
          <button type="button" className="text-button" onClick={() => setBanner(null)}>
            Dismiss
          </button>
        </div>
      ) : null}

      <section className="admin-summary" aria-label="Overview metrics">
      <SummaryCard label="Pending approvals" value={counts.approvals} tone="accent" />
      <SummaryCard label="Withdrawal requests" value={counts.withdraws} tone="warning" />
      <SummaryCard label="Staff members" value={counts.staff} tone="neutral" />
      <SummaryCard label="Driver partners" value={counts.drivers} tone="neutral" />
      <SummaryCard label="Accounts managed" value={counts.accounts} tone="neutral" />
      <SummaryCard label="New orders waiting" value={counts.newOrders} tone="accent" />
    </section>

      <div className="admin-panels">
        <section className="admin-panel" aria-labelledby="admin-approvals-heading">
          <header className="admin-panel__header">
            <div>
              <h2 id="admin-approvals-heading">Restaurant approvals</h2>
              <p>Review new restaurant applications awaiting verification.</p>
            </div>
            <button type="button" className="text-button" onClick={handleAddApproval}>
              Add sample request
            </button>
          </header>
          <button type="button" className="panel-help" onClick={() => toggleHelp('approvals')}>
            {helpTopic === 'approvals' ? 'Hide checklist' : 'Show review checklist'}
          </button>
          {helpTopic === 'approvals' ? (
            <div className="admin-help-card">
              <h3>Approval checklist</h3>
              <ul>
                <li>Confirm business license and current health inspection certificate.</li>
                <li>Verify onboarding call is scheduled within two business days.</li>
                <li>Ensure menu file matches the uploaded CSV template.</li>
              </ul>
            </div>
          ) : null}
          <ul className="admin-approvals">
            {approvals.map((approval) => (
              <li key={approval.id} className="admin-approval-card">
                <div>
                  <h3>{approval.restaurant}</h3>
                  <p>{approval.owner} â€¢ {approval.cuisine}</p>
                  <p className="admin-approval-meta">Submitted {approval.submittedAt}</p>
                </div>
                <div className="admin-approval-actions">
                  <button
                    type="button"
                    className="chip success"
                    onClick={() =>
                      openConfirm('approval', {
                        id: approval.id,
                        label: approval.restaurant,
                        message: `Approve ${approval.restaurant} and move them into the onboarding pipeline?`,
                      })
                    }
                  >
                    Approve
                  </button>
                  <button
                    type="button"
                    className="chip danger"
                    onClick={() =>
                      openConfirm('approval', {
                        id: approval.id,
                        label: approval.restaurant,
                        message: `Decline ${approval.restaurant}'s application?`,
                      })
                    }
                  >
                    Decline
                  </button>
                </div>
              </li>
            ))}
          </ul>
        </section>

        <section className="admin-panel" aria-labelledby="admin-withdraw-heading">
          <header className="admin-panel__header">
            <div>
              <h2 id="admin-withdraw-heading">Withdrawal requests</h2>
              <p>Restaurants leaving the marketplace or requesting a pause.</p>
            </div>
            <button type="button" className="text-button" onClick={handleAddWithdraw}>
              Add sample request
            </button>
          </header>
          <button type="button" className="panel-help" onClick={() => toggleHelp('withdraws')}>
            {helpTopic === 'withdraws' ? 'Hide guidance' : 'Show process guidance'}
          </button>
          {helpTopic === 'withdraws' ? (
            <div className="admin-help-card">
              <h3>Processing guidance</h3>
              <ul>
                <li>Confirm the request with the owner over the phone before deactivation.</li>
                <li>Ensure outstanding payouts are reconciled prior to final removal.</li>
                <li>Offer marketing support if the exit is temporary.</li>
              </ul>
            </div>
          ) : null}
          <ul className="admin-withdrawals">
            {withdrawRequests.map((request) => (
              <li key={request.id} className={`admin-withdraw-card ${request.open ? 'open' : ''}`}>
                <button
                  type="button"
                  className="admin-withdraw-card__header"
                  onClick={() => toggleWithdrawCard(request.id)}
                  aria-expanded={request.open}
                >
                  <span>{request.restaurant}</span>
                  <span className="admin-withdraw-card__meta">Requested {request.submittedAt}</span>
                </button>
                {request.open ? (
                  <div className="admin-withdraw-card__body">
                    <p className="admin-withdraw-card__note">{request.note}</p>
                    <p className="admin-withdraw-card__contact">Point of contact: {request.contact}</p>
                    <div className="admin-approval-actions">
                      <button
                        type="button"
                        className="chip success"
                        onClick={() =>
                          openConfirm('withdraw', {
                            id: request.id,
                            label: request.restaurant,
                            message: `Approve withdrawal for ${request.restaurant}?`,
                          })
                        }
                      >
                        Approve
                      </button>
                      <button
                        type="button"
                        className="chip danger"
                        onClick={() =>
                          openConfirm('withdraw', {
                            id: request.id,
                            label: request.restaurant,
                            message: `Deny withdrawal for ${request.restaurant}?`,
                          })
                        }
                      >
                        Deny
                      </button>
                    </div>
                  </div>
                ) : null}
              </li>
            ))}
          </ul>
        </section>

        <section className="admin-panel" aria-labelledby="admin-accounts-heading">
          <header className="admin-panel__header">
            <div>
              <h2 id="admin-accounts-heading">User accounts</h2>
              <p>Admin-generated logins ensure our username rule stays enforced.</p>
            </div>
            <div className="admin-account-actions">
              <button type="button" className="text-button" onClick={() => handleAddAccount('staff')}>
                Create staff account
              </button>
              <button type="button" className="text-button" onClick={() => handleAddAccount('owner')}>
                Create owner account
              </button>
            </div>
          </header>
          <table className="admin-accounts" role="grid">
            <thead>
              <tr>
                <th scope="col">Username</th>
                <th scope="col">Role</th>
                <th scope="col">Status</th>
                <th scope="col" aria-label="actions" />
              </tr>
            </thead>
            <tbody>
              {userAccounts.map((account) => (
                <tr key={account.id}>
                  <td>{account.username}</td>
                  <td className="capitalize">{account.role}</td>
                  <td>
                    <span className={`account-status account-status--${account.status}`}>
                      {account.status}
                    </span>
                  </td>
                  <td>
                    <button type="button" className="text-button" onClick={() => toggleAccountStatus(account.id)}>
                      {account.status === 'active' ? 'Suspend' : 'Activate'}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          <p className="admin-helper">
            FrontDash usernames combine the partner's last name plus two digits (e.g., <strong>rivera07</strong>). Customers
            do not self-register; every account is provisioned here.
          </p>
        </section>

        <section className="admin-panel" aria-labelledby="admin-staff-heading">
          <header className="admin-panel__header">
            <div>
              <h2 id="admin-staff-heading">Staff roster</h2>
              <p>Manage the internal team supporting partner restaurants.</p>
            </div>
            <button type="button" className="text-button" onClick={openAddStaffModal}>
              Add staff member
            </button>
          </header>
          <button type="button" className="panel-help" onClick={() => toggleHelp('staff')}>
            {helpTopic === 'staff' ? 'Hide onboarding tips' : 'Show onboarding tips'}
          </button>
          {helpTopic === 'staff' ? (
            <div className="admin-help-card">
              <h3>Onboarding tips</h3>
              <ul>
                <li>Pair new specialists with experienced mentors for their first two weeks.</li>
                <li>Schedule shadow sessions with a live restaurant onboarding call.</li>
                <li>Review the SLA playbook covering approvals, menu setup, and support handoffs.</li>
              </ul>
            </div>
          ) : null}
          <ul className="admin-roster">
            {staffMembers.map((member) => (
              <StaffListItem
                key={member.id}
                person={member}
                onRemove={() =>
                  openConfirm('staff', {
                    id: member.id,
                    label: member.name,
                    message: `Remove ${member.name} from the staff roster?`,
                  })
                }
              />
            ))}
          </ul>
        </section>

        <section className="admin-panel" aria-labelledby="admin-drivers-heading">
          <header className="admin-panel__header">
            <div>
              <h2 id="admin-drivers-heading">Driver network</h2>
              <p>Keep a vetted pool of independent couriers available for assignments.</p>
            </div>
            <button type="button" className="text-button" onClick={openAddDriverModal}>
              Add driver
            </button>
          </header>
          <ul className="admin-roster">
            {drivers.map((driver) => (
              <StaffListItem
                key={driver.id}
                person={driver}
                onRemove={() =>
                  openConfirm('driver', {
                    id: driver.id,
                    label: driver.name,
                    message: `Remove ${driver.name} from the driver pool?`,
                  })
                }
              />
            ))}
          </ul>
          <footer className="admin-driver-footer">
            <p>Need to rotate assignments?</p>
            <button type="button" className="text-button" onClick={openPasswordModal}>
              Reset admin password
            </button>
          </footer>
        </section>
      </div>

      {modalState?.type === 'confirm' && confirmPayload ? (
        <ModalShell
          title="Confirm action"
          description={confirmPayload.message}
          onClose={() => setModalState(null)}
          actions={
            <>
              <button type="button" className="modal-button secondary" onClick={() => setModalState(null)}>
                Cancel
              </button>
              <button type="button" className="modal-button destructive" onClick={handleResolveRequest}>
                Confirm
              </button>
            </>
          }
        />
      ) : null}

      {modalState?.type === 'add-staff' ? (
        <ModalShell
          title="Add staff member"
          description="Create a new internal point-of-contact for partner restaurants."
          onClose={() => setModalState(null)}
          actions={
            <>
              <button type="button" className="modal-button secondary" onClick={() => setModalState(null)}>
                Cancel
              </button>
              <button type="button" className="modal-button primary" onClick={handleStaffSubmit}>
                Save staff member
              </button>
            </>
          }
        >
          <div className="modal-field">
            <label htmlFor="staff-first-name">First name</label>
            <input
              id="staff-first-name"
              type="text"
              value={staffForm.firstName}
              onChange={(event) => setStaffForm({ ...staffForm, firstName: event.target.value, error: '' })}
              autoComplete="given-name"
            />
          </div>
          <div className="modal-field">
            <label htmlFor="staff-last-name">Last name</label>
            <input
              id="staff-last-name"
              type="text"
              value={staffForm.lastName}
              onChange={(event) => setStaffForm({ ...staffForm, lastName: event.target.value, error: '' })}
              autoComplete="family-name"
            />
          </div>
          {staffForm.error ? <p className="modal-helper">{staffForm.error}</p> : null}
        </ModalShell>
      ) : null}

      {modalState?.type === 'add-driver' ? (
        <ModalShell
          title="Add driver"
          description="Invite a new courier to accept on-demand delivery assignments."
          onClose={() => setModalState(null)}
          actions={
            <>
              <button type="button" className="modal-button secondary" onClick={() => setModalState(null)}>
                Cancel
              </button>
              <button type="button" className="modal-button primary" onClick={handleDriverSubmit}>
                Save driver
              </button>
            </>
          }
        >
          <div className="modal-field">
            <label htmlFor="driver-first-name">First name</label>
            <input
              id="driver-first-name"
              type="text"
              value={driverForm.firstName}
              onChange={(event) => setDriverForm({ ...driverForm, firstName: event.target.value, error: '' })}
              autoComplete="given-name"
            />
          </div>
          <div className="modal-field">
            <label htmlFor="driver-last-name">Last name</label>
            <input
              id="driver-last-name"
              type="text"
              value={driverForm.lastName}
              onChange={(event) => setDriverForm({ ...driverForm, lastName: event.target.value, error: '' })}
              autoComplete="family-name"
            />
          </div>
          {driverForm.error ? <p className="modal-helper">{driverForm.error}</p> : null}
        </ModalShell>
      ) : null}

      {modalState?.type === 'password' ? (
        <ModalShell
          title="Update admin password"
          description="Set a new administrator password that meets platform security requirements."
          onClose={() => setModalState(null)}
          actions={
            <>
              <button type="button" className="modal-button secondary" onClick={() => setModalState(null)}>
                Cancel
              </button>
              <button
                type="button"
                className="modal-button primary"
                onClick={handlePasswordSubmit}
                disabled={!passwordValid || passwordMismatch}
              >
                Save password
              </button>
            </>
          }
        >
          <div className="modal-field">
            <label htmlFor="admin-new-password">New password</label>
            <input
              id="admin-new-password"
              type="password"
              value={passwordForm.newPassword}
              onChange={(event) =>
                setPasswordForm({ ...passwordForm, newPassword: event.target.value })
              }
              autoComplete="new-password"
            />
          </div>
          <div className="modal-field">
            <label htmlFor="admin-confirm-password">Confirm password</label>
            <input
              id="admin-confirm-password"
              type="password"
              value={passwordForm.confirmPassword}
              onChange={(event) =>
                setPasswordForm({ ...passwordForm, confirmPassword: event.target.value })
              }
              autoComplete="new-password"
            />
          </div>
          <button
            type="button"
            className="modal-inline-toggle"
            onClick={() =>
              setPasswordForm((prev) => ({ ...prev, showRequirements: !prev.showRequirements }))
            }
          >
            {passwordForm.showRequirements ? 'Hide requirements' : 'Show requirements'}
          </button>
          {passwordForm.showRequirements ? (
            <p className="modal-password-requirements">
              Passwords must be at least six characters and contain an uppercase letter, a lowercase letter, and a number.
            </p>
          ) : null}
          {!passwordValid && passwordForm.newPassword.length > 0 ? (
            <p className="modal-helper">Password does not yet meet complexity requirements.</p>
          ) : null}
          {passwordMismatch ? <p className="modal-helper">Passwords must match.</p> : null}
        </ModalShell>
      ) : null}
    </div>
    </>
  );
}
